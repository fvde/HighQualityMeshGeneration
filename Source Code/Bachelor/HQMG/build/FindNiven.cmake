# Utility function to find the niven library
# The various libraries will be found and put into
# NIVEN_<NAME>_LIBRARY, with correct settings for debug and release.
# For usage, just link against NIVEN_<NAME>_LIBRARY
#
# By default, the search will start in NIVEN_ROOT_DIR, which
# should be an install target (i.e. Niven should have been installed into
# that directory.) Both x64 and x86 are supported.
#
# For including, the NIVEN_INCLUDE_DIR should be used; the libraries
# are put in NIVEN_LIBRARY_DIR. Library binaries (.DLL on Windows) are
# placed in NIVEN_BINARY_DIR.

SET(NIVEN_ROOT_DIR CACHE PATH "Niven root directory")

IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(NIVEN_ARCHITECTURE "x64")
ELSEIF(CMAKE_SIZEOF_VOID_P EQUAL 4)
	SET(NIVEN_ARCHITECTURE "x86")
ENDIF(CMAKE_SIZEOF_VOID_P EQUAL 8)

IF(Niven_FIND_COMPONENTS)
  FOREACH(component ${Niven_FIND_COMPONENTS})
    STRING(TOUPPER ${component} _COMPONENT)
    SET(NIVEN_USE_${_COMPONENT} 1)
  ENDFOREACH(component)
ELSE(Niven_FIND_COMPONENTS)
	SET(Niven_FIND_COMPONENTS "Core")
	SET(NIVEN_USE_CORE 1)
ENDIF(Niven_FIND_COMPONENTS)

FIND_PATH(NIVEN_INCLUDE_DIR
	NAMES
		Core/inc/Core.h
	HINTS
		${NIVEN_ROOT_DIR}/include)
	
IF(WIN32)
	SET(NIVEN_WINDOWS_SUPPORT ON)
ELSEIF(UNIX)
	SET(NIVEN_LINUX_SUPPORT ON)
ENDIF(WIN32)

# On Linux, .so files are all we need for linking
IF(WIN32)
	SET(NIVEN_LIBRARY_DIR ${NIVEN_ROOT_DIR}/lib/${NIVEN_ARCHITECTURE})
ELSEIF(UNIX)
	SET(NIVEN_LIBRARY_DIR ${NIVEN_ROOT_DIR}/bin/${NIVEN_ARCHITECTURE})
ENDIF(WIN32)

SET(NIVEN_BINARY_DIR ${NIVEN_ROOT_DIR}/bin/${NIVEN_ARCHITECTURE})

MARK_AS_ADVANCED(NIVEN_INCLUDE_DIR NIVEN_LIBRARY_DIR)

FIND_LIBRARY(NIVEN_CORE_LIBRARY_RELEASE			niven.Core 				PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_CORE_LIBRARY_DEBUG			niven.Cored 			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_ENGINE_LIBRARY_RELEASE		niven.Engine 			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_ENGINE_LIBRARY_DEBUG			niven.Engined 			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_IMAGE_LIBRARY_RELEASE		niven.Image 			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_IMAGE_LIBRARY_DEBUG			niven.Imaged 			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_BUILD_LIBRARY_RELEASE		niven.Build				PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_BUILD_LIBRARY_DEBUG			niven.Buildd			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_RENDER_LIBRARY_RELEASE		niven.Render			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_RENDER_LIBRARY_DEBUG			niven.Renderd			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_COMPUTECL_LIBRARY_DEBUG		niven.Compute.OpenCLd	PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_COMPUTECL_LIBRARY_RELEASE	niven.Compute.OpenCL	PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_VOLUME_LIBRARY_DEBUG			niven.Volumed			PATHS ${NIVEN_LIBRARY_DIR})
FIND_LIBRARY(NIVEN_VOLUME_LIBRARY_RELEASE		niven.Volume			PATHS ${NIVEN_LIBRARY_DIR})

SET(NIVEN_BUILD_LIBRARY 
	optimized 	${NIVEN_BUILD_LIBRARY_RELEASE}
	debug		${NIVEN_BUILD_LIBRARY_DEBUG})
SET(NIVEN_CORE_LIBRARY 
	optimized 	${NIVEN_CORE_LIBRARY_RELEASE}
	debug		${NIVEN_CORE_LIBRARY_DEBUG})
SET(NIVEN_ENGINE_LIBRARY 
	optimized 	${NIVEN_ENGINE_LIBRARY_RELEASE}
	debug		${NIVEN_ENGINE_LIBRARY_DEBUG})
SET(NIVEN_IMAGE_LIBRARY 
	optimized 	${NIVEN_IMAGE_LIBRARY_RELEASE}
	debug		${NIVEN_IMAGE_LIBRARY_DEBUG})
SET(NIVEN_RENDER_LIBRARY 
	optimized 	${NIVEN_RENDER_LIBRARY_RELEASE}
	debug		${NIVEN_RENDER_LIBRARY_DEBUG})
SET(NIVEN_COMPUTE_CL_LIBRARY
		optimized 	${NIVEN_COMPUTECL_LIBRARY_RELEASE}
		debug		${NIVEN_COMPUTECL_LIBRARY_DEBUG})
SET(NIVEN_VOLUME_LIBRARY
		optimized 	${NIVEN_VOLUME_LIBRARY_RELEASE}
		debug		${NIVEN_VOLUME_LIBRARY_DEBUG})
SET(NIVEN_LIBRARIES "")		

IF(Niven_FIND_COMPONENTS)
  FOREACH(component ${Niven_FIND_COMPONENTS})
	STRING(TOUPPER ${component} COMPONENT)
	SET(LIB_NAME NIVEN_${COMPONENT}_LIBRARY)
	LIST(APPEND NIVEN_LIBRARIES
		optimized 	${NIVEN_${COMPONENT}_LIBRARY_RELEASE}
		debug 		${NIVEN_${COMPONENT}_LIBRARY_DEBUG})
  ENDFOREACH(component)
ENDIF(Niven_FIND_COMPONENTS)

# niven depends on boost in several public interfaces
FIND_PACKAGE(Boost 1.50 REQUIRED)
	
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(Niven	DEFAULT_MSG NIVEN_LIBRARIES NIVEN_INCLUDE_DIR)

FUNCTION(NIVEN_COPY_BINARIES TargetDirectory)
	ADD_CUSTOM_TARGET(NivenCopyBinaries
	COMMAND
		${CMAKE_COMMAND} -E copy_directory ${NIVEN_ROOT_DIR}/bin/${NIVEN_ARCHITECTURE} ${TargetDirectory}
	COMMENT "Copying niven binaries to '${TargetDirectory}'"
	VERBATIM)
ENDFUNCTION(NIVEN_COPY_BINARIES)